MVP
- draw it
- add appointment [title, date, time]
- view list of appointments (ordered by date)
- hide/remove old appointments
- delete appointment
- view details
- show weather


Trello: Project Management Software
- put the above in the to do
-

use in head of HTML for mobile
<meta name="viewport" content="width-device-width">

media query


BREAKDOWN of project approach

1) Page 1 css, html
    build the first page [appts homepage]
2) jquery to show page 2
    Add jquery onlick.plus = show page two
3) css + html for page 2
    when they click replace the html with other html
4) jquery to show page 1 when save or back
    jquery back to the last page
5) X button click listener
    put click listener on x button
    to create a modal
    append below HTML to pop up
    <div class="prompt">
    <span class="prompt-message">are you sure?</span>
    <button class="prompt-delete">delete</button>
    <button class="prompt-cancel">cancel</button>
    </div>
6)



RESPONSIBILITIES

Main Screen
- Show appointments
- The abilities to changes pages (add new, edit)
- Remove appt
- Confirmation prompt
  - confirm
  - cancel

New Appointment
- Go back to list view
- Create appointment
- Add new appt to list to appointment store

Show Details
- Go back
- edit
- delete

- appointment store
- appointment class





Different files
- show-appointments.js
-


Steps to first check-in
1) create a js file that declares the global variable
    var app = {}

2) make appointment.js file to hold your appointment object
    //The appointment constructor creates a new appt
    app.Appointment = function (spec) {
    //TODO: construct an appointment from spec
    };

3) make appointment-store.js file

    app.AppointmentStore = function() {

    //TODO:  implement the appt store here
    // should have these properties
    // add(appointment)
    // removebyID(appointmentID)
    // query()
};

4) make list-appointments-screen.js file
    Purpose is to manage the first page screen (list view)


5) make page-switcher.js file
    app.PageSwitcher = function () {


    registerPage(name, callback)
    goToPage(name)

}


so it will flow in HTML like:
jquery
app.js
appointment-store.js
appointment.js



Next steps:

Bobby:
- what goes in form into an object (newAppointment)
- being able to make that display

Grace:
- get edit and new form to work together
- lo dash
- delete button



-----------------------------
MISC
- appointment object working
- how to create instances of the object
- appointment store functioning



------------------------------
Thurs 2/5

Steps for class group coding
- instal depndencies (jquery, lodash)
- make your form
- place holder divs for content
- add js scripts to HTML
- wire up the submit event
- get the inputted username
- call their api
- lodash template to display the user profile
- combine AJAX result w/ template and display

terminal
bower install jquery
bower install lodash
git add .
git commit -m jquery & lodash install

html
<form class="form"></form>
<input type="text" class="username-input">
<button type="submit" class="submit-button">Go</button>
<script type="text/html" id="user-data">
<div class="user-info">
  <div class="user-info__pic">
    <img class="avatar" src="<%- m.avatar__url %>"/> </div>
  </div>
  <div class="user-info__name"> <%- m.name || m.login %> </div>
</div>
</script>



$('.wrapper').html(template(userData));




- make button w/ #repos
- make a placeholder for repos list
- wire up button event handler
- call repos api to get all repos
- create lodash template
- get html for template
- slice html in our placeholder




DATE

var date = 02/07/15
var time = 7:30pm
date+ "" + time



var html $('<div> <button> hi</button></div>');

$('button', html).clock(function() {
alert('hi');
})

$('body').append(html);
